[{"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\index.js":"1","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\reportWebVitals.js":"2","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\App.js":"3","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\contexts\\UserContext.js":"4","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\contexts\\BreadcrumbContext.js":"5","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\api.js":"6","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\utils.js":"7","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Layout\\UserLayout.js":"8","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Layout\\SideNav.js":"9","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Layout\\LayoutHeader.js":"10","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\MyCanceledAppointments.js":"11","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\MyOncomingAppointments.js":"12","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\MyPreviousAppointments.js":"13","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\UserHome.js":"14","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\UserSettings.js":"15","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Shop\\CreateAppointment.js":"16","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Common\\NoMatch.js":"17","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Common\\ChangeMyPassword.js":"18","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\MyAppointments.js":"19","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\UserProfile.js":"20","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\myActiveAppointments.js":"21","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\UserLogin.js":"22","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\ForgotPassword.js":"23","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\ResetPassword.js":"24","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\UserRegister.js":"25","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\ShopRegister.js":"26"},{"size":612,"mtime":1612755703588,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1612755703588,"results":"29","hashOfConfig":"28"},{"size":503,"mtime":1613939041900,"results":"30","hashOfConfig":"28"},{"size":656,"mtime":1613987979866,"results":"31","hashOfConfig":"28"},{"size":683,"mtime":1612755703587,"results":"32","hashOfConfig":"28"},{"size":110,"mtime":1612762663388,"results":"33","hashOfConfig":"28"},{"size":410,"mtime":1612755703589,"results":"34","hashOfConfig":"28"},{"size":5160,"mtime":1613988704890,"results":"35","hashOfConfig":"28"},{"size":4798,"mtime":1613989346026,"results":"36","hashOfConfig":"28"},{"size":2025,"mtime":1613989544095,"results":"37","hashOfConfig":"28"},{"size":293,"mtime":1613938951637,"results":"38","hashOfConfig":"28"},{"size":295,"mtime":1613938922867,"results":"39","hashOfConfig":"28"},{"size":286,"mtime":1613938916432,"results":"40","hashOfConfig":"28"},{"size":227,"mtime":1613938832766,"results":"41","hashOfConfig":"28"},{"size":98,"mtime":1613938859056,"results":"42","hashOfConfig":"28"},{"size":10003,"mtime":1613984035568,"results":"43","hashOfConfig":"28"},{"size":240,"mtime":1613938805911,"results":"44","hashOfConfig":"28"},{"size":4707,"mtime":1613938867069,"results":"45","hashOfConfig":"28"},{"size":9560,"mtime":1613956867820,"results":"46","hashOfConfig":"28"},{"size":13911,"mtime":1613939192464,"results":"47","hashOfConfig":"28"},{"size":255,"mtime":1613938782188,"results":"48","hashOfConfig":"28"},{"size":4631,"mtime":1613989576826,"results":"49","hashOfConfig":"28"},{"size":3440,"mtime":1613939252229,"results":"50","hashOfConfig":"28"},{"size":4069,"mtime":1613939268374,"results":"51","hashOfConfig":"28"},{"size":7014,"mtime":1613989620225,"results":"52","hashOfConfig":"28"},{"size":13530,"mtime":1613955970551,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1ioh9d8",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\index.js",[],["117","118"],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\reportWebVitals.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\App.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\contexts\\UserContext.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\contexts\\BreadcrumbContext.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\api.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\utils.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Layout\\UserLayout.js",["119","120","121","122","123","124"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport UserContext from \"../../contexts/UserContext\";\r\nimport BreadCrumbContext from \"../../contexts/BreadcrumbContext\";\r\nimport MyActiveAppointments from \"../../components/User/myActiveAppointments\";\r\nimport MyCanceledAppointments from \"../../components/User/MyCanceledAppointments\";\r\nimport MyPreviousAppointments from \"../../components/User/MyPreviousAppointments\";\r\nimport MyOncomingAppointments from \"../../components/User/MyOncomingAppointments\";\r\nimport CreateAppointment from \"../../components/Shop/CreateAppointment\";\r\nimport UserProfile from \"../../components/User/UserProfile\";\r\nimport ForgotPassword from \"../LoginPages/ForgotPassword\";\r\nimport ResetPassword from \"../LoginPages/ResetPassword\";\r\nimport UserRegister from \"../LoginPages/UserRegister\";\r\nimport ShopRegister from \"../LoginPages/ShopRegister\";\r\nimport UserLogin from \"../LoginPages/UserLogin\";\r\nimport NoMatch from \"../../components/Common/NoMatch\";\r\nimport Home from \"../../components/User/UserHome\";\r\nimport SideNav from \"./SideNav\";\r\nimport LayoutHeader from \"./LayoutHeader\";\r\nimport ChangeMyPassword from \"../Common/ChangeMyPassword\";\r\nimport UserSettings from \"../User/UserSettings\";\r\nimport { Layout, Breadcrumb } from \"antd\";\r\nimport API from \"../../api\";\r\n\r\nconst { Sider, Content } = Layout;\r\n\r\nexport default function UserLayout() {\r\n  const {\r\n    isLoggedIn,\r\n    userRole,\r\n    setUserRole,\r\n    token,\r\n    setUserNameSurname,\r\n    userNameSurname,\r\n  } = useContext(UserContext);\r\n  const { firstBreadcrumb, secondBreadcrumb, lastBreadcrumb } = useContext(\r\n    BreadCrumbContext\r\n  );\r\n\r\n  const [collapsed, setCollapse] = useState(false);\r\n\r\n  const onCollapse = (collapsed) => {\r\n    setCollapse(collapsed);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path=\"/login\" component={UserLogin} />\r\n        <Route exact path=\"/signup\" component={UserRegister} />\r\n        <Route exact path=\"/shopSignup\" component={ShopRegister} />\r\n        <Route exact path=\"/forgotPassword\" component={ForgotPassword} />\r\n        <Route\r\n          exact\r\n          path=\"/resetPassword/:verify_token\"\r\n          component={ResetPassword}\r\n        />\r\n        <Route\r\n          path=\"/\"\r\n          render={() =>\r\n            isLoggedIn || token != null ? (\r\n              <Layout>\r\n                <Sider\r\n                  collapsible\r\n                  collapsed={collapsed}\r\n                  onCollapse={onCollapse}\r\n                >\r\n                  <SideNav />\r\n                </Sider>\r\n                <Layout>\r\n                  <LayoutHeader />\r\n\r\n                  <Content\r\n                    style={{\r\n                      margin: \"24px 16px\",\r\n                      padding: 24,\r\n                      minHeight: \"calc(100vh - 114px)\",\r\n                      background: \"#fff\",\r\n                    }}\r\n                  >\r\n                    <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n                      <Breadcrumb.Item>{firstBreadcrumb}</Breadcrumb.Item>\r\n                      <Breadcrumb.Item>{secondBreadcrumb}</Breadcrumb.Item>\r\n                      <Breadcrumb.Item>{lastBreadcrumb}</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Switch>\r\n                      <Route path=\"/\" exact component={Home} />\r\n                      <Route\r\n                        path=\"/myPersonelInformations\"\r\n                        component={UserProfile}\r\n                      />\r\n                      {/* <Route path=\"/myPersonelInformations/:id\" component={MyPersonelInformations} /> */}\r\n                      <Route\r\n                        path=\"/myActiveAppointments\"\r\n                        component={MyActiveAppointments}\r\n                      />\r\n                      <Route\r\n                        path=\"/MyCanceledAppointments\"\r\n                        component={MyCanceledAppointments}\r\n                      />\r\n                      <Route\r\n                        path=\"/MyPreviousAppointments\"\r\n                        component={MyPreviousAppointments}\r\n                      />\r\n                      <Route\r\n                        path=\"/createAppointment\"\r\n                        component={CreateAppointment}\r\n                      />\r\n                      <Route path=\"/userProfile\" component={UserProfile} />\r\n                      <Route\r\n                        path=\"/myOncomingAppointments\"\r\n                        component={MyOncomingAppointments}\r\n                      />\r\n                      <Route\r\n                        path=\"/changeMyPassword\"\r\n                        component={ChangeMyPassword}\r\n                      />\r\n                      <Route path=\"/userSettings\" component={UserSettings} />\r\n                      <Route path=\"*\">\r\n                        <NoMatch />\r\n                      </Route>\r\n                    </Switch>\r\n                  </Content>\r\n                </Layout>\r\n              </Layout>\r\n            ) : (\r\n              <UserLogin />\r\n            )\r\n          }\r\n        />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Layout\\SideNav.js",["125","126","127"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport API from \"../../api\";\r\nimport UserContext from \"../../contexts/UserContext\";\r\n\r\nimport {\r\n  UserOutlined,\r\n  HomeOutlined,\r\n  CheckSquareOutlined,\r\n  LogoutOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { useHistory } from \"react-router\";\r\nconst { SubMenu } = Menu;\r\n\r\nconst SideNav = () => {\r\n  const history = useHistory();\r\n  const {\r\n    setIsLoggedIn,\r\n    setToken,\r\n    userRole,\r\n    token,\r\n    setUserRole,\r\n    setUserNameSurname,\r\n  } = useContext(UserContext);\r\n\r\n  useEffect(() => {\r\n    const getCurrentUserRole = async () => {\r\n      await API.get(`user/currentUserRole`, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          setUserRole(res.data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n    const getCurrentUser = async () => {\r\n      await API.get(`user/currentUser`, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          setUserNameSurname(res.data.firstName + \" \" + res.data.lastName);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n    getCurrentUser();\r\n    getCurrentUserRole();\r\n  }, []);\r\n\r\n  const handleMyActiveAppointments = () => {\r\n    history.push(\"/myActiveAppointments\");\r\n  };\r\n  const handleCreateAppointment = () => {\r\n    history.push(\"/createAppointment\");\r\n  };\r\n  const handleMyCanceledAppointments = () => {\r\n    history.push(\"/myCanceledAppointments\");\r\n  };\r\n  const handleUserProfile = () => {\r\n    history.push(\"/userProfile\");\r\n  };\r\n  const handleShopProfile = () => {\r\n    history.push(\"/shopProfile\");\r\n  };\r\n  const handleChangeMyPassword = () => {\r\n    history.push(\"/changeMyPassword\");\r\n  };\r\n  const handleMyPreviousAppointments = () => {\r\n    history.push(\"/myPreviousAppointments\");\r\n  };\r\n  const handleMyOncomingAppointments = () => {\r\n    history.push(\"/myOncomingAppointments\");\r\n  };\r\n  const redirectHomePage = () => {\r\n    history.push(\"/\");\r\n  };\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"auth_token\");\r\n    setIsLoggedIn(false);\r\n    setToken(null);\r\n    history.push(\"/\");\r\n  };\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          height: \"32px\",\r\n          background: \"rgba(255, 255, 255, 0.2)\",\r\n          margin: \"16px\",\r\n        }}\r\n      ></div>\r\n\r\n      <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\r\n        <Menu.Item key=\"1\" icon={<HomeOutlined />} onClick={redirectHomePage}>\r\n          <span>Ana Sayfa</span>\r\n        </Menu.Item>\r\n\r\n        {userRole == \"User\" ? (\r\n          <SubMenu\r\n            key=\"subAppointments\"\r\n            icon={<CheckSquareOutlined />}\r\n            title={<span>Randevu Bilgilerim</span>}\r\n          >\r\n            <Menu.Item key=\"4\" onClick={handleMyActiveAppointments}>\r\n              Aktif Randevularım\r\n            </Menu.Item>\r\n            <Menu.Item key=\"5\" onClick={handleMyCanceledAppointments}>\r\n              İptal Edilen Randevularım\r\n            </Menu.Item>\r\n            <Menu.Item key=\"6\" onClick={handleMyOncomingAppointments}>\r\n              Yaklaşan Randevularım\r\n            </Menu.Item>\r\n            <Menu.Item key=\"7\" onClick={handleMyPreviousAppointments}>\r\n              Geçmiş Randevularım\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        ) : (\r\n          <SubMenu\r\n            key=\"subAppointments\"\r\n            icon={<CheckSquareOutlined />}\r\n            title={<span>Randevu Bilgilerim</span>}\r\n          >\r\n            <Menu.Item key=\"8\" onClick={handleCreateAppointment}>\r\n              Randevu Oluştur\r\n            </Menu.Item>\r\n            <Menu.Item key=\"9\" onClick={handleCreateAppointment}>\r\n              Randevu Defterim\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        )}\r\n        <SubMenu\r\n          key=\"subAccount\"\r\n          icon={<UserOutlined />}\r\n          title={<span>Hesap Ayarları</span>}\r\n        >\r\n          {userRole == \"User\" ? (\r\n            <Menu.Item key=\"10\" onClick={handleUserProfile}>\r\n              Profilim\r\n            </Menu.Item>\r\n          ) : (\r\n            <Menu.Item key=\"11\" onClick={handleShopProfile}>\r\n              Mağaza Bilgilerim\r\n            </Menu.Item>\r\n          )}\r\n          <Menu.Item key=\"12\" onClick={handleChangeMyPassword}>\r\n            Şifre Değiştir\r\n          </Menu.Item>\r\n        </SubMenu>\r\n        <Menu.Item icon={<LogoutOutlined />} key=\"10\" onClick={handleLogout}>\r\n          <span>Çıkış</span>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\nexport default SideNav;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Layout\\LayoutHeader.js",["128","129","130"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Menu, Layout } from \"antd\";\r\nimport UserContext from \"../../contexts/UserContext\";\r\nimport { SettingFilled } from \"@ant-design/icons\";\r\nimport API from \"../../api\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Header } = Layout;\r\n\r\nexport default function LayoutHeader() {\r\n  const {\r\n    setIsLoggedIn,\r\n    setToken,\r\n    userNameSurname,\r\n    userRole,\r\n    token,\r\n    setUserNameSurname,\r\n  } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  const handleUserProfile = () => {\r\n    history.push(\"/userProfile\");\r\n  };\r\n  const handleShopProfile = () => {\r\n    history.push(\"/shopProfile\");\r\n  };\r\n  const handleSettings = () => {\r\n    history.push(\"/userSettings\");\r\n  };\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"auth_token\");\r\n    setIsLoggedIn(false);\r\n    setToken(\"\");\r\n    setUserNameSurname(\"\");\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  return (\r\n    <div>\r\n      <Header className=\"header\">\r\n        <div className=\"logo\" />\r\n\r\n        <Menu\r\n          theme=\"dark\"\r\n          mode=\"horizontal\"\r\n          style={{ float: \"right\" }}\r\n          defaultSelectedKeys={[\"2\"]}\r\n        >\r\n          <Menu.Item key=\"deneme\">Hoşgeldiniz {userNameSurname}</Menu.Item>\r\n          <SubMenu key=\"account\" icon={<SettingFilled />}>\r\n            {userRole == \"User\" ? (\r\n              <Menu.Item key=\"10\" onClick={handleUserProfile}>\r\n                Profilim\r\n              </Menu.Item>\r\n            ) : (\r\n              <Menu.Item key=\"11\" onClick={handleShopProfile}>\r\n                Mağaza Bilgilerim\r\n              </Menu.Item>\r\n            )}\r\n            <Menu.Item onClick={handleSettings} key=\"setting:2\">\r\n              Ayarlar\r\n            </Menu.Item>\r\n            <Menu.Item onClick={handleLogout} key=\"setting:3\">\r\n              Çıkış\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        </Menu>\r\n      </Header>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\MyCanceledAppointments.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\MyOncomingAppointments.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\MyPreviousAppointments.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\UserHome.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\UserSettings.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Shop\\CreateAppointment.js",["131","132","133","134","135","136","137","138","139"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport UserContext from \"../../contexts/UserContext\";\r\nimport BreadCrumbContext from \"../../contexts/BreadcrumbContext\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  DatePicker,\r\n  TimePicker,\r\n  Select,\r\n  Typography,\r\n  ConfigProvider,\r\n  message,\r\n} from \"antd\";\r\nimport API from \"../../api\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport \"moment/locale/tr\";\r\nimport locale from \"antd/lib/locale/tr_TR\";\r\nimport moment from \"moment\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst CreateAppointment = () => {\r\n  const [form] = Form.useForm();\r\n  const { token } = useContext(UserContext);\r\n  const {\r\n    setFirstBreadcrumb,\r\n    setSecondBreadcrumb,\r\n    setLastBreadcrumb,\r\n  } = useContext(BreadCrumbContext);\r\n  const history = useHistory();\r\n  const [, forceUpdate] = useState({}); // To disable submit button at the beginning.\r\n  const [loading, setLoading] = useState([]);\r\n  const [userBirthday, setUserBirthday] = useState(\"\");\r\n  const [size, setSize] = React.useState(\"default\");\r\n  const dateFormat = \"DD.MM.YYYY\";\r\n  const { Option } = Select;\r\n  const format = \"HH:mm\";\r\n  const { RangePicker } = TimePicker;\r\n\r\n  const style = { padding: \"8px 0\" };\r\n\r\n  const setCurrenUser = (userForm) => {\r\n    setLoading(true);\r\n    API.put(`user/updateUser`, userForm, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        message.success(res.data.response);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n        if (error.response.status === 401) {\r\n          history.push(\"/login\");\r\n          message.error(\"Bu İşlemi Yapmaya Yetkiniz Yok!\");\r\n        } else {\r\n          message.error(\r\n            \"Kişisel Bilgileri Güncelleme Sırasında Hata ile Karşılaşıldı!\"\r\n          );\r\n        }\r\n      });\r\n  };\r\n\r\n  const getCurrentUser = async () => {\r\n    setLoading(true);\r\n    await API.get(`user/currentUser?`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setLoading(false);\r\n        var d = new Date(res.data.birthday);\r\n        var birthdaystring = d.toLocaleString(\"tr-TR\").substring(0, 10);\r\n        setUserBirthday(birthdaystring);\r\n        form.setFieldsValue({\r\n          name: res.data.firstName,\r\n          surname: res.data.lastName,\r\n          email: res.data.email,\r\n          birthDay: birthdaystring,\r\n          city: res.data.cityId,\r\n          district: res.data.districtId,\r\n          zone: res.data.zoneId,\r\n          username: res.data.username,\r\n        });\r\n        console.log(userBirthday);\r\n      })\r\n      .catch((error) => {\r\n        if (error.response.status === 401) {\r\n          history.push(\"/login\");\r\n          message.error(\"Bu İşlemi Yapmaya Yetkiniz Yok!\");\r\n        } else {\r\n          message.error(\r\n            \"Kişisel Bilgileri Getirme Esnasında Hata ile Karşılaşıldı!\"\r\n          );\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    forceUpdate({});\r\n\r\n    getCurrentUser();\r\n    setFirstBreadcrumb(\"Anasayfa\");\r\n    setSecondBreadcrumb(\"Randevular\");\r\n    setLastBreadcrumb(\"Randevu Oluştur\");\r\n  }, []);\r\n\r\n  function handleChange(value) {\r\n    console.log(`Selected: ${value}`);\r\n  }\r\n\r\n  function onTimeChange(time, timeString) {\r\n    console.log(time, timeString);\r\n  }\r\n\r\n  const onFinish = (values) => {\r\n    const userForm = {\r\n      FirstName: values.name,\r\n      LastName: values.surname,\r\n      CityId: values.city,\r\n      DistrictId: values.district,\r\n      ZoneId: values.zone,\r\n      BirthDay: values.birthDay,\r\n      Username: values.username,\r\n    };\r\n    setCurrenUser(userForm);\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 18,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col span={23}>\r\n          <Title style={{ textAlign: \"center\" }} level={2}>\r\n            Randevu Oluştur\r\n          </Title>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Form\r\n        form={form}\r\n        name=\"horizontal_login\"\r\n        layout=\"horizontal\"\r\n        onFinish={onFinish}\r\n      >\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                label=\"Hizmet Verilen Günler\"\r\n                name=\"name\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Boş Bırakmayınız!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  mode=\"tags\"\r\n                  size={size}\r\n                  placeholder=\"Seçiniz\"\r\n                  defaultValue={[]}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  <Option key=\"Pzt\">Pazartesi</Option>\r\n                  <Option key=\"Salı\">Salı</Option>\r\n                  <Option key=\"Çar\">Çaşamba</Option>\r\n                  <Option key=\"Per\">Perşembe</Option>\r\n                  <Option key=\"Cum\">Cuma</Option>\r\n                  <Option key=\"Cmt\">Cumartesi</Option>\r\n                  <Option key=\"Pz\">Pazar</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                label=\"Randevu Period (Dakika)\"\r\n                name=\"appointmentRange\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Boş Bırakmayınız!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={size}\r\n                  placeholder=\"Seçiniz\"\r\n                  defaultValue={[]}\r\n                  onChange={handleChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  <Option key=\"15\">15</Option>\r\n                  <Option key=\"30\">30</Option>\r\n                  <Option key=\"60\">60</Option>\r\n                  <Option key=\"90\">90</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                label=\"Açılış Saati\"\r\n                name=\"startTime\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Saat Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <TimePicker\r\n                  defaultValue={moment(\"00:00\", format)}\r\n                  format={format}\r\n                />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                label=\"Kapanış Saati\"\r\n                name=\"endTime\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Saat Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <TimePicker\r\n                  defaultValue={moment(\"00:00\", format)}\r\n                  format={format}\r\n                />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                label=\"Hizmet Verilmeyen Zaman Dilimi\"\r\n                name=\"unUsedTime\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Saat Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <RangePicker\r\n                  format={format}\r\n                  defaultValue={moment(\"00:00\", format)}\r\n                />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                wrapperCol={{ ...layout.wrapperCol, offset: 8 }}\r\n                shouldUpdate={true}\r\n              >\r\n                {() => (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    loading={loading}\r\n                    htmlType=\"submit\"\r\n                    style={{ width: \"100%\" }}\r\n                    disabled={\r\n                      !!form\r\n                        .getFieldsError()\r\n                        .filter(({ errors }) => errors.length).length\r\n                    }\r\n                  >\r\n                    Kaydet\r\n                  </Button>\r\n                )}\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateAppointment;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Common\\NoMatch.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\Common\\ChangeMyPassword.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\MyAppointments.js",["140","141","142","143","144"],"//src/components/pages/list.tsx\r\nimport React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { Table, Row, Col, Button, Typography, Input, Modal } from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Tag, Space, message, Spin, Select } from \"antd\";\r\nimport API from \"../../api\";\r\nimport { serialize } from \"../../utils\";\r\nimport UserContext from \"../../contexts/UserContext\";\r\nimport BreadCrumbContext from \"../../contexts/BreadcrumbContext\";\r\nconst { TextArea } = Input;\r\n\r\nexport default function MyAppointments(props) {\r\n  const { Title } = Typography;\r\n  const history = useHistory();\r\n  const [myAppointments, setAppointmentData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [sortValue, setSortValue] = useState(\"\");\r\n  const status = props.status;\r\n  const header = props.header;\r\n  const { token } = useContext(UserContext);\r\n  const {\r\n    setFirstBreadcrumb,\r\n    setSecondBreadcrumb,\r\n    setLastBreadcrumb,\r\n  } = useContext(BreadCrumbContext);\r\n  const [pagination, setPagination] = useState({\r\n    current: 1,\r\n    pageSize: 10,\r\n  });\r\n  const [appointmentCancelReason, setAppointmentCancelReason] = useState(\"\");\r\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(0);\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const showModel = (obj) => {\r\n    setIsModalVisible(true);\r\n    setSelectedAppointmentId(obj.id);\r\n    setAppointmentCancelReason(\"\");\r\n  };\r\n\r\n  const handleOk = () => {\r\n    cancelAppointment(selectedAppointmentId, appointmentCancelReason);\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const pageHeader = header;\r\n  const { Option } = Select;\r\n\r\n  const handleClick = () => {\r\n    history.push(\"/form\");\r\n  };\r\n\r\n  const handleSortChange = useCallback(\r\n    (value) => {\r\n      setSortValue(value);\r\n    },\r\n    [sortValue]\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetch({ pagination });\r\n    setFirstBreadcrumb(\"Anasayfa\");\r\n    setSecondBreadcrumb(\"Randevu Bilgilerim\");\r\n    setLastBreadcrumb(header);\r\n  }, [sortValue, searchText]);\r\n\r\n  const cancelAppointment = async (appointmentId, cancelReasonText) => {\r\n    if (window.confirm(\"Randevuyu İptal Etmek İstediğinize Emin misiniz?\")) {\r\n      const cancelReason = {\r\n        CancelReason: cancelReasonText,\r\n      };\r\n      await API.put(\r\n        `appointment/cancelAppointment/${appointmentId}`,\r\n        cancelReason,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      )\r\n        .then((res) => {\r\n          message.success(res.data.response);\r\n          fetch({ pagination });\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.status === 401) {\r\n            history.push(\"/login\");\r\n            message.error(\"Bu İşlemi Yapmaya Yetkiniz Yok!\");\r\n          } else if (error.response.status === 404) {\r\n            message.warning(error.response.data);\r\n          } else {\r\n            message.error(error.response.data);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const convertToFullDate = (datetime) => {\r\n    var d = new Date(datetime);\r\n    var month = d.getUTCMonth() + 1; //months from 1-12\r\n    var day = d.getDate();\r\n    var year = d.getUTCFullYear();\r\n\r\n    var minutes = d.getMinutes();\r\n    var hour = d.getHours();\r\n\r\n    var newdate = `${day}.${month}.${year} ${hour}:${minutes}`;\r\n    return newdate;\r\n  };\r\n\r\n  const handleTableChange = (pagination, filters, sorter) => {\r\n    fetch({\r\n      pagination,\r\n    });\r\n  };\r\n\r\n  const handleChangeSearch = (e) => {\r\n    setSearchText(e.target.value);\r\n    setPagination({\r\n      current: 1,\r\n      pageSize: 10,\r\n    });\r\n  };\r\n\r\n  const fetch = async (params) => {\r\n    setLoading(true);\r\n    var filterAppointmentDto = serialize({\r\n      Current: params.pagination.current,\r\n      PageSize: params.pagination.pageSize,\r\n      Status: status,\r\n      SearchText: searchText,\r\n      SortValue: sortValue,\r\n    });\r\n    await API.get(`appointment/filter?${filterAppointmentDto}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setAppointmentData(res.data.item1);\r\n        setLoading(false);\r\n        setPagination({\r\n          ...params.pagination,\r\n          total: res.data.item2,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n        if (error.response.status === 403) {\r\n          message.error(\"Bu Sayfayı Görmeye Yetkili Değilsiniz!\");\r\n          return;\r\n        }\r\n        if (error.response.status === 401) {\r\n          history.push(\"/login\");\r\n        } else {\r\n          message.error(\"Randevuları Getirme Esnasında Hata ile Karşılaşıldı!\");\r\n          return;\r\n        }\r\n      });\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Id\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n    },\r\n    {\r\n      title: \"Mağaza\",\r\n      dataIndex: \"shopTitle\",\r\n      key: \"shopTitle\",\r\n      render: (text) => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: \"Randevu Başlangıç Tarihi\",\r\n      dataIndex: \"appointmentBeginDate\",\r\n      key: \"appointmentBeginDate\",\r\n      render: (date) => <a>{convertToFullDate(date)}</a>,\r\n    },\r\n    {\r\n      title: \"Randevu Bitiş Tarihi\",\r\n      dataIndex: \"appointmentEndDate\",\r\n      key: \"appointmentEndDate\",\r\n      render: (date) => <a>{convertToFullDate(date)}</a>,\r\n    },\r\n    {\r\n      title: \"Durumu\",\r\n      key: \"status\",\r\n      dataIndex: \"status\",\r\n      render: (status) => (\r\n        <div>\r\n          <Tag color={status === 1 ? \"green\" : \"red\"}>\r\n            {status === 1 ? \"Aktif\" : \"Pasif\"}\r\n          </Tag>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Randevu Aldığım Hizmetler\",\r\n      key: \"appointmentServices\",\r\n      dataIndex: \"appointmentServices\",\r\n      render: (appointmentServices) => (\r\n        <div>\r\n          {appointmentServices.map((service) => {\r\n            let color =\r\n              service.services.serviceName.length > 5 ? \"geekblue\" : \"green\";\r\n            if (service.services.serviceName === \"loser\") {\r\n              color = \"volcano\";\r\n            }\r\n            return (\r\n              <Tag color={color} key={service.services.id}>\r\n                {service.services.serviceName.toUpperCase()}\r\n              </Tag>\r\n            );\r\n          })}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"id\",\r\n\r\n      render: (text, obj) => (\r\n        <Space size=\"middle\">\r\n          <Button\r\n            disabled={obj.status === 0}\r\n            block\r\n            type={obj.status === 1 ? \"danger\" : \"primary\"}\r\n            onClick={() => showModel(obj)}\r\n          >\r\n            {obj.status === 1 ? \"İptal Et\" : \"Aktif Et\"}\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  myAppointments.map((data) => {\r\n    data.shopTitle = data.shops.shopTitle;\r\n    return data;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Row gutter={[40, 0]}>\r\n        <Col span={18}>\r\n          <Title level={2}>{pageHeader}</Title>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Button onClick={handleClick} block type=\"primary\">\r\n            Yeni Randevu Talep Et\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={12}>\r\n          <Input placeholder=\"Ara..\" onChange={handleChangeSearch} />\r\n        </Col>\r\n        <Col span={12}>\r\n          <Select\r\n            defaultValue=\"Seçiniz\"\r\n            onChange={handleSortChange}\r\n            style={{ width: \"100%\" }}\r\n          >\r\n            <Option key={\"ascByCreatedDate\"}>\r\n              Oluşturulma Tarihine Göre Artan\r\n            </Option>\r\n            <Option key={\"descByCreatedDate\"}>\r\n              Oluşturulma Tarihine Göre Azalan\r\n            </Option>\r\n            <Option key={\"ascByAppointmentDate\"}>\r\n              En Yakın Tarihli Randevuya Göre\r\n            </Option>\r\n            <Option key={\"descByAppointmentDate\"}>\r\n              En Uzak Tarihli Randevuya Göre\r\n            </Option>\r\n          </Select>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={[40, 0]}>\r\n        <Col span={24}>\r\n          {loading ? (\r\n            <div className=\"spinClass\">\r\n              <Space size=\"middle\">\r\n                <Spin size=\"large\" />\r\n              </Space>\r\n            </div>\r\n          ) : (\r\n            <Table\r\n              columns={columns}\r\n              rowKey={(record) => record.id}\r\n              pagination={pagination}\r\n              loading={loading}\r\n              onChange={handleTableChange}\r\n              dataSource={myAppointments}\r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      <Modal\r\n        title=\"Randevu İptal\"\r\n        visible={isModalVisible}\r\n        onOk={handleOk}\r\n        okButtonProps={{\r\n          disabled: appointmentCancelReason === \"\" ? true : false,\r\n        }}\r\n        onCancel={handleCancel}\r\n      >\r\n        <Row gutter={[40, 0]}>\r\n          <Col span={24}>Randevu İptal Nedeni</Col>\r\n        </Row>\r\n        <Row gutter={[40, 0]}>\r\n          <Col span={24}>\r\n            <TextArea\r\n              showCount\r\n              value={appointmentCancelReason}\r\n              onChange={(event) =>\r\n                setAppointmentCancelReason(event.target.value)\r\n              }\r\n              maxLength={500}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\UserProfile.js",["145"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport UserContext from \"../../contexts/UserContext\";\r\nimport BreadCrumbContext from \"../../contexts/BreadcrumbContext\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  DatePicker,\r\n  Select,\r\n  Typography,\r\n  ConfigProvider,\r\n  message,\r\n} from \"antd\";\r\nimport API from \"../../api\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport \"moment/locale/tr\";\r\nimport locale from \"antd/lib/locale/tr_TR\";\r\nimport moment from \"moment\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst UserProfile = () => {\r\n  const [form] = Form.useForm();\r\n  const { token } = useContext(UserContext);\r\n  const {\r\n    setFirstBreadcrumb,\r\n    setSecondBreadcrumb,\r\n    setLastBreadcrumb,\r\n  } = useContext(BreadCrumbContext);\r\n  const history = useHistory();\r\n  const [, forceUpdate] = useState({}); // To disable submit button at the beginning.\r\n  const [cities, setCities] = useState([]);\r\n  const [loading, setLoading] = useState([]);\r\n  const [districts, setDistricts] = useState([]);\r\n  const [zones, setZones] = useState([]);\r\n  const [userBirthday, setUserBirthday] = useState(\"\");\r\n  const dateFormat = \"DD.MM.YYYY\";\r\n  const { Option } = Select;\r\n\r\n  const style = { padding: \"8px 0\" };\r\n\r\n  const setCurrenUser = (userForm) => {\r\n    setLoading(true);\r\n    API.put(`user/updateUser`, userForm, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        message.success(res.data.response);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n        if (error.response.status === 401) {\r\n          history.push(\"/login\");\r\n          message.error(\"Bu İşlemi Yapmaya Yetkiniz Yok!\");\r\n        } else {\r\n          message.error(\r\n            \"Kişisel Bilgileri Güncelleme Sırasında Hata ile Karşılaşıldı!\"\r\n          );\r\n        }\r\n      });\r\n  };\r\n\r\n  const getCities = async () => {\r\n    await API.get(`place/getCities`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setCities(res.data);\r\n      })\r\n      .catch((error) => {\r\n        message.error(\"Şehirleri Getirme Sırasında Hata ile Karşılaşıldı\");\r\n      });\r\n  };\r\n\r\n  const getDistricts = async (cityId) => {\r\n    await API.get(`place/getDistrictsByCityId?cityId=${cityId}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setDistricts(res.data);\r\n      })\r\n      .catch((error) => {\r\n        message.error(\"İlçeleri Getirme Sırasında Hata ile Karşılaşıldı\");\r\n      });\r\n  };\r\n\r\n  const getZones = async (districtId) => {\r\n    await API.get(`place/GetZonesByDistrictId?districtId=${districtId}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setZones(res.data);\r\n      })\r\n      .catch((error) => {\r\n        message.error(\"Bölgeleri Getirme Sırasında Hata ile Karşılaşıldı\");\r\n      });\r\n  };\r\n\r\n  const getCurrentUser = async () => {\r\n    setLoading(true);\r\n    await API.get(`user/currentUser?`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setLoading(false);\r\n        var d = new Date(res.data.birthday);\r\n        var birthdaystring = d.toLocaleString(\"tr-TR\").substring(0, 10);\r\n        setUserBirthday(birthdaystring);\r\n        form.setFieldsValue({\r\n          name: res.data.firstName,\r\n          surname: res.data.lastName,\r\n          email: res.data.email,\r\n          birthDay: birthdaystring,\r\n          city: res.data.cityId,\r\n          district: res.data.districtId,\r\n          zone: res.data.zoneId,\r\n          username: res.data.username,\r\n        });\r\n        getDistricts(res.data.cityId);\r\n        getZones(res.data.districtId);\r\n        console.log(userBirthday);\r\n      })\r\n      .catch((error) => {\r\n        if (error.response.status === 401) {\r\n          history.push(\"/login\");\r\n          message.error(\"Bu İşlemi Yapmaya Yetkiniz Yok!\");\r\n        } else {\r\n          message.error(\r\n            \"Kişisel Bilgileri Getirme Esnasında Hata ile Karşılaşıldı!\"\r\n          );\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    forceUpdate({});\r\n\r\n    getCities();\r\n    getCurrentUser();\r\n    setFirstBreadcrumb(\"Anasayfa\");\r\n    setSecondBreadcrumb(\"Hesap\");\r\n    setLastBreadcrumb(\"Profilim\");\r\n  }, []);\r\n\r\n  const handleCityChange = (value) => {\r\n    setDistricts([]);\r\n    form.setFieldsValue({\r\n      district: \"\",\r\n      zone: \"\",\r\n    });\r\n    getDistricts(value);\r\n  };\r\n\r\n  const handleDistrictChange = (value) => {\r\n    setZones([]);\r\n    form.setFieldsValue({\r\n      zone: \"\",\r\n    });\r\n    getZones(value);\r\n  };\r\n\r\n  const handleZoneChange = (value) => {};\r\n\r\n  const onBirthdayChange = (date, dateString) => {\r\n    form.setFieldsValue({\r\n      birthDay: dateString,\r\n    });\r\n    setUserBirthday(dateString);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    const userForm = {\r\n      FirstName: values.name,\r\n      LastName: values.surname,\r\n      CityId: values.city,\r\n      DistrictId: values.district,\r\n      ZoneId: values.zone,\r\n      BirthDay: values.birthDay,\r\n      Username: values.username,\r\n    };\r\n    setCurrenUser(userForm);\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 18,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col span={23}>\r\n          <Title style={{ textAlign: \"center\" }} level={2}>\r\n            Profil Bilgilerim\r\n          </Title>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Form\r\n        form={form}\r\n        name=\"horizontal_login\"\r\n        layout=\"horizontal\"\r\n        onFinish={onFinish}\r\n      >\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                label=\"İsim\"\r\n                name=\"name\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen İsminizi Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"İsim\"\r\n                />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"surname\"\r\n                label=\"Soyisim\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Soyisminizi Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"Soyisim\"\r\n                />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"birthDay\"\r\n                label=\"Doğum Tarihi\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Doğum Tarihinizi Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <ConfigProvider locale={locale}>\r\n                  <DatePicker\r\n                    format={dateFormat}\r\n                    defaultValue={moment(userBirthday, dateFormat)}\r\n                    value={moment(userBirthday, dateFormat)}\r\n                    onChange={onBirthdayChange}\r\n                    placeholder=\"Doğum Tarihiniz\"\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </ConfigProvider>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"username\"\r\n                label=\"Kullanıcı Adı\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Kullanıcı Adını Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input placeholder=\"Kullanıcı Adı\" />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"email\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                label=\"Email\"\r\n              >\r\n                <Input placeholder=\"email\" disabled=\"disabled\" />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"city\"\r\n                label=\"İl\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 20 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen İl Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={\"default\"}\r\n                  onChange={handleCityChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {cities.map((city, key) => {\r\n                    return (\r\n                      <Option value={city.id} key={city.id}>\r\n                        {city.cityName}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"district\"\r\n                label=\"İlçe\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 20 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen İlçe Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={\"default\"}\r\n                  onChange={handleDistrictChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {districts.map((district, key) => {\r\n                    return (\r\n                      <Option value={district.id} key={district.id}>\r\n                        {district.districtName}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 20 }}\r\n                name=\"zone\"\r\n                label=\"Köy/Mahalle\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Semt/Mahalle Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={\"default\"}\r\n                  onChange={handleZoneChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {zones.map((zone, key) => {\r\n                    return (\r\n                      <Option value={zone.id} key={zone.id}>\r\n                        {zone.zoneName}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                wrapperCol={{ ...layout.wrapperCol, offset: 6 }}\r\n                shouldUpdate={true}\r\n              >\r\n                {() => (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    loading={loading}\r\n                    htmlType=\"submit\"\r\n                    style={{ width: \"100%\" }}\r\n                    disabled={\r\n                      !!form\r\n                        .getFieldsError()\r\n                        .filter(({ errors }) => errors.length).length\r\n                    }\r\n                  >\r\n                    Kaydet\r\n                  </Button>\r\n                )}\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\nexport default UserProfile;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\User\\myActiveAppointments.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\UserLogin.js",["146","147"],"import React, { useState, useContext } from \"react\";\r\nimport { Row, Col, Input, Form, Button, Checkbox, message, Card } from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\nimport background from \"../../assets/img/login-background-image.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"../../contexts/UserContext\";\r\nimport API from \"../../api\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nconst UserLogin = () => {\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  const { setIsLoggedIn, setToken } = useContext(UserContext);\r\n  const handleSubmit = async (values) => {\r\n    setLoading(true);\r\n    const user = {\r\n      Email: values.email,\r\n      Password: values.password,\r\n    };\r\n    await API.post(`user/authenticate`, user)\r\n      .then((res) => {\r\n        if (res.status) {\r\n          const token = res.data.response;\r\n          localStorage.setItem(\"auth_token\", res.data.response);\r\n          setToken(token);\r\n          message.success(\"Hoşgeldiniz!\");\r\n          setIsLoggedIn(true);\r\n          setLoading(false);\r\n          history.push(\"/\");\r\n        } else {\r\n          message.error(res.response);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (error.response != undefined) {\r\n          message.error(error.response.data);\r\n        } else {\r\n          message.error(\r\n            \"Şüpheli karakterler tespit edildi. < > & gibi karakterleri kaldırıp lütfen tekrar deneyiniz.\"\r\n          );\r\n        }\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 14,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingTop: 150,\r\n        backgroundImage: `url(${background})`,\r\n        backgroundPosition: \"center\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col span={12} offset={6}>\r\n          <Card\r\n            title=\"Giriş Yap\"\r\n            hoverable\r\n            bordered={true}\r\n            style={{ width: \"100%\" }}\r\n            headStyle={{\r\n              textAlign: \"center\",\r\n              fontSize: \"19px\",\r\n            }}\r\n          >\r\n            <Form\r\n              {...layout}\r\n              form={form}\r\n              name=\"login\"\r\n              layout=\"horizontal\"\r\n              onFinish={handleSubmit}\r\n            >\r\n              <Form.Item\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Email Adresi Giriniz\",\r\n                  },\r\n                  {\r\n                    max: 50,\r\n                    message:\r\n                      \"Email Adresiniz En Fazla 50 Karakterden Oluşmalıdır\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  placeholder=\"Lütfen Email Giriniz\"\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Şifre\"\r\n                name=\"password\"\r\n                rules={[\r\n                  { required: true, message: \"Lütfen Şifrenizi Giriniz\" },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  placeholder=\"Lütfen Şifrenizi Giriniz\"\r\n                  prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 6 }}>\r\n                <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                  <Checkbox>Beni Hatırla</Checkbox>\r\n                </Form.Item>\r\n\r\n                <a className=\"login-form-forgot\" href=\"\">\r\n                  <Link to=\"/forgotPassword\">Şifreni mi Unuttun?</Link>\r\n                </a>\r\n              </Form.Item>\r\n\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 6 }}>\r\n                <Button\r\n                  type=\"primary\"\r\n                  loading={loading}\r\n                  className=\"login-form-button\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Giriş Yap\r\n                </Button>\r\n                Henüz Üye Değilmisin? <Link to=\"/signUp\">Üye Ol</Link>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default UserLogin;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\ForgotPassword.js",["148"],"import React, { useState } from \"react\";\r\nimport { Row, Col, Input, Form, Button, message, Card } from \"antd\";\r\nimport background from \"../../assets/img/login-background-image.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport API from \"../../api\";\r\n\r\nconst ForgotPassword = () => {\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n  const handleSubmit = async (values) => {\r\n    setLoading(true);\r\n    const forgotPasswordModel = {\r\n      Email: values.email,\r\n    };\r\n    await API.post(`user/forgotPassword`, forgotPasswordModel)\r\n      .then((res) => {\r\n        message.success(\r\n          \"Şifrenizi Yenilemek İçin Gerekli Olan İşlemleri Email Adresinize Gönderdik!\"\r\n        );\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        if (error.response != undefined) {\r\n          message.error(error.response.data);\r\n        } else {\r\n          message.error(\r\n            \"Şüpheli karakterler tespit edildi. < > & gibi karakterleri kaldırıp lütfen tekrar deneyiniz.\"\r\n          );\r\n        }\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 14,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingTop: 150,\r\n        backgroundImage: `url(${background})`,\r\n        backgroundPosition: \"center\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col span={12} offset={6}>\r\n          <Card\r\n            title=\"Şifremi Unuttum\"\r\n            hoverable\r\n            bordered={true}\r\n            style={{ width: \"100%\" }}\r\n            headStyle={{\r\n              textAlign: \"center\",\r\n              fontSize: \"19px\",\r\n            }}\r\n          >\r\n            <Form\r\n              {...layout}\r\n              form={form}\r\n              name=\"forgotPassword\"\r\n              layout=\"horizontal\"\r\n              onFinish={handleSubmit}\r\n            >\r\n              <Form.Item\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Email Adresi Giriniz\",\r\n                  },\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"Email Adresinizi Doğru Formatta Değil\",\r\n                  },\r\n                  {\r\n                    max: 50,\r\n                    message:\r\n                      \"Email Adresiniz En Fazla 50 Karakterden Oluşmalıdır\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input placeholder=\"Lütfen Email Giriniz\" />\r\n              </Form.Item>\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 6 }}>\r\n                <Button\r\n                  type=\"primary\"\r\n                  loading={loading}\r\n                  className=\"login-form-button\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Şifre Gönder\r\n                </Button>\r\n                <Link to=\"/login\">Login</Link> Sayfasına Geri Dön\r\n              </Form.Item>\r\n              <Form.Item\r\n                wrapperCol={{ ...layout.wrapperCol, offset: 6 }}\r\n              ></Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default ForgotPassword;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\ResetPassword.js",["149"],"import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Row, Col, Input, Form, Button, message, Card } from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\nimport background from \"../../assets/img/login-background-image.png\";\r\nimport API from \"../../api\";\r\n\r\nconst ResetPassword = () => {\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  const { verify_token } = useParams();\r\n  const handleSubmit = async (values) => {\r\n    setLoading(true);\r\n    const resetPasswordModel = {\r\n      Password: values.password,\r\n      VerifyToken: verify_token,\r\n    };\r\n    await API.post(`user/resetPassword`, resetPasswordModel)\r\n      .then((res) => {\r\n        message.success(\"Şifrenizi Başarıyla Güncellediniz!\");\r\n        history.push(\"/login\");\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        if (error.response != undefined) {\r\n          message.error(error.response.data);\r\n        } else {\r\n          message.error(\r\n            \"Şüpheli karakterler tespit edildi. < > & gibi karakterleri kaldırıp lütfen tekrar deneyiniz.\"\r\n          );\r\n        }\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 14,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingTop: 150,\r\n        backgroundImage: `url(${background})`,\r\n        backgroundPosition: \"center\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col span={12} offset={6}>\r\n          <Card\r\n            title=\"Şifremi Yenile\"\r\n            hoverable\r\n            bordered={true}\r\n            style={{ width: \"100%\" }}\r\n            headStyle={{\r\n              textAlign: \"center\",\r\n              fontSize: \"19px\",\r\n            }}\r\n          >\r\n            <Form\r\n              {...layout}\r\n              form={form}\r\n              name=\"resetPassword\"\r\n              layout=\"horizontal\"\r\n              onFinish={handleSubmit}\r\n            >\r\n              <Form.Item\r\n                label=\"Şifre\"\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Şifrenizi Giriniz\",\r\n                  },\r\n                  {\r\n                    min: 8,\r\n                    message: \"Şifreniz En Az 8 Karakterden Oluşmalıdır\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password placeholder=\"Lütfen Şifrenizi Giriniz\" />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"confirm\"\r\n                label=\"Şifreyi Onayla\"\r\n                dependencies={[\"password\"]}\r\n                hasFeedback\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Şifrenizi Onaylayınız\",\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(_, value) {\r\n                      if (!value || getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\"Girdiğiniz Şifreler Eşleşmiyor!\");\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password placeholder=\"Lütfen Şifreyi Onaylayınız\" />\r\n              </Form.Item>\r\n\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 6 }}>\r\n                <Button\r\n                  type=\"primary\"\r\n                  loading={loading}\r\n                  className=\"login-form-button\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Şifremi Güncelle\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default ResetPassword;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\UserRegister.js",["150"],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LoginPages\\ShopRegister.js",["151","152"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Select,\r\n  message,\r\n  Checkbox,\r\n  Card,\r\n  AutoComplete,\r\n} from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\nimport background from \"../../assets/img/login-background-image.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"../../contexts/UserContext\";\r\nimport API from \"../../api\";\r\n\r\nconst ShopRegister = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\r\n  const { setIsLoggedIn, setToken } = useContext(UserContext);\r\n  const [cities, setCities] = useState([]);\r\n  const [districts, setDistricts] = useState([]);\r\n  const [zones, setZones] = useState([]);\r\n  const { Option } = Select;\r\n  const { TextArea } = Input;\r\n\r\n  const handleSubmit = (values) => {\r\n    const shopRegisterModel = {\r\n      Email: values.email,\r\n      Password: values.password,\r\n      ShopTitle: values.shopTitle,\r\n      Address: values.shopAddress,\r\n      ShopDescription: values.shopDescription,\r\n      OwnerName: values.ownerName,\r\n      PhoneNumber: values.phone,\r\n      WebSite: values.website,\r\n      CityId: values.city,\r\n      DistrictId: values.district,\r\n      ZoneId: values.zone,\r\n      TaxNumber: values.taxNumber,\r\n      TaxAddress: values.taxAddress,\r\n    };\r\n    setLoading(true);\r\n    API.post(`shop/register`, shopRegisterModel)\r\n      .then((res) => {\r\n        localStorage.setItem(\"auth_token\", res.data.response);\r\n        message.success(\"You've Registered Successfuly!\");\r\n        setIsLoggedIn(true);\r\n        setToken(res.data.response);\r\n        setLoading(false);\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        if (error.response != undefined) {\r\n          message.error(error.response.data);\r\n        } else {\r\n          message.error(\r\n            \"Şüpheli karakterler tespit edildi. < > & gibi karakterleri kaldırıp lütfen tekrar deneyiniz.\"\r\n          );\r\n        }\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 14,\r\n    },\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select style={{ width: 70 }}>\r\n        <Option value=\"+90\">+90</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n  const onWebsiteChange = (value) => {\r\n    if (!value) {\r\n      setAutoCompleteResult([]);\r\n    } else {\r\n      setAutoCompleteResult(\r\n        [\".com\", \".org\", \".net\"].map((domain) => `${value}${domain}`)\r\n      );\r\n    }\r\n  };\r\n\r\n  const getCities = async () => {\r\n    await API.get(`place/getCities`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setCities(res.data);\r\n      })\r\n      .catch((error) => {\r\n        message.error(\"Şehirleri Getirme Sırasında Hata ile Karşılaşıldı\");\r\n      });\r\n  };\r\n\r\n  const getDistricts = async (cityId) => {\r\n    await API.get(`place/getDistrictsByCityId?cityId=${cityId}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setDistricts(res.data);\r\n      })\r\n      .catch((error) => {\r\n        message.error(\"İlçeleri Getirme Sırasında Hata ile Karşılaşıldı\");\r\n      });\r\n  };\r\n\r\n  const getZones = async (districtId) => {\r\n    await API.get(`place/GetZonesByDistrictId?districtId=${districtId}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setZones(res.data);\r\n      })\r\n      .catch((error) => {\r\n        message.error(\"Bölgeleri Getirme Sırasında Hata ile Karşılaşıldı\");\r\n      });\r\n  };\r\n\r\n  const handleCityChange = (value) => {\r\n    setDistricts([]);\r\n    form.setFieldsValue({\r\n      district: \"\",\r\n      zone: \"\",\r\n    });\r\n    getDistricts(value);\r\n  };\r\n\r\n  const handleDistrictChange = (value) => {\r\n    setZones([]);\r\n    form.setFieldsValue({\r\n      zone: \"\",\r\n    });\r\n    getZones(value);\r\n  };\r\n\r\n  const handleZoneChange = (value) => {};\r\n\r\n  const websiteOptions = autoCompleteResult.map((website) => ({\r\n    label: website,\r\n    value: website,\r\n  }));\r\n\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 14,\r\n        offset: 6,\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCities();\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingTop: 0,\r\n        backgroundImage: `url(${background})`,\r\n        backgroundPosition: \"center\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        width: \"100vw\",\r\n        height: \"120vh\",\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col span={12} offset={6}>\r\n          <Card\r\n            title=\"Yeni Mağaza Kaydı\"\r\n            hoverable\r\n            bordered={true}\r\n            style={{ width: \"100%\" }}\r\n            headStyle={{\r\n              textAlign: \"center\",\r\n              fontSize: \"19px\",\r\n            }}\r\n          >\r\n            <Form\r\n              {...layout}\r\n              form={form}\r\n              name=\"register\"\r\n              layout=\"horizontal\"\r\n              onFinish={handleSubmit}\r\n            >\r\n              <Form.Item\r\n                name=\"shopTitle\"\r\n                label=\"Mağaza Unvanı\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Mağaza Unvanı Giriniz\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input placeholder=\"Mağaza Unvanı\" />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"ownerName\"\r\n                label=\"Mağaza Sahibi\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Mağaza Sahibini Giriniz\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input placeholder=\"Mağaza Sahibi\" />\r\n              </Form.Item>\r\n              <Form.Item name=\"taxNumber\" label=\"Vergi Numarası\">\r\n                <Input placeholder=\"Vergi Numarası\" />\r\n              </Form.Item>\r\n              <Form.Item name=\"taxAddress\" label=\"Vergi Adresi\">\r\n                <Input placeholder=\"Vergi Adresi\" />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"phone\"\r\n                label=\"Telefon Numarası\"\r\n                rules={[\r\n                  {\r\n                    max: 10,\r\n                    message:\r\n                      \"Telefon Numarası Belirlenen Max Karakter Sınırını Geçemezsiniz\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input addonBefore={prefixSelector} style={{ width: \"100%\" }} />\r\n              </Form.Item>\r\n\r\n              <Form.Item name=\"website\" label=\"Website\">\r\n                <AutoComplete\r\n                  options={websiteOptions}\r\n                  onChange={onWebsiteChange}\r\n                  placeholder=\"website\"\r\n                >\r\n                  <Input />\r\n                </AutoComplete>\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"shopDescription\"\r\n                label=\"Mağaza Açıklaması\"\r\n                rules={[\r\n                  {\r\n                    max: 500,\r\n                    message:\r\n                      \"Mağaza Açıklaması En Fazla 500 Karakterden Oluşabilir\",\r\n                  },\r\n                ]}\r\n              >\r\n                <TextArea placeholder=\"Mağaza Açıklaması\" />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"city\"\r\n                label=\"İl\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 14 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen İl Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={\"default\"}\r\n                  onChange={handleCityChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {cities.map((city, key) => {\r\n                    return (\r\n                      <Option value={city.id} key={city.id}>\r\n                        {city.cityName}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"district\"\r\n                label=\"İlçe\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 14 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen İlçe Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={\"default\"}\r\n                  onChange={handleDistrictChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {districts.map((district, key) => {\r\n                    return (\r\n                      <Option value={district.id} key={district.id}>\r\n                        {district.districtName}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 14 }}\r\n                name=\"zone\"\r\n                label=\"Köy/Mahalle\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Semt/Mahalle Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={\"default\"}\r\n                  onChange={handleZoneChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {zones.map((zone, key) => {\r\n                    return (\r\n                      <Option value={zone.id} key={zone.id}>\r\n                        {zone.zoneName}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n\r\n              <Form.Item name=\"shopAddress\" label=\"Mağaza Adresi\">\r\n                <TextArea placeholder=\"Mağaza Adresi\" />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                rules={[\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"Email Adresinizi Doğru Formatta Değil!\",\r\n                  },\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Email Adresinizi Giriniz\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input placeholder=\"Lütfen Email Adresinizi Giriniz\" />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"password\"\r\n                label=\"Şifre\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Şifrenizi Giriniz\",\r\n                  },\r\n                  {\r\n                    min: 8,\r\n                    message: \"Şifreniz En Az 8 Karakterden Oluşmalıdır\",\r\n                  },\r\n                ]}\r\n                hasFeedback\r\n              >\r\n                <Input.Password />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"confirm\"\r\n                label=\"Şifreyi Onayla\"\r\n                dependencies={[\"password\"]}\r\n                hasFeedback\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Şifrenizi Onaylayınız\",\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(_, value) {\r\n                      if (!value || getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\"Girdiğiniz Şifreler Eşleşmiyor!\");\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"agreement\"\r\n                valuePropName=\"checked\"\r\n                rules={[\r\n                  {\r\n                    validator: (_, value) =>\r\n                      value\r\n                        ? Promise.resolve()\r\n                        : Promise.reject(\"Should accept agreement\"),\r\n                  },\r\n                ]}\r\n                {...tailFormItemLayout}\r\n              >\r\n                <Checkbox>\r\n                  I have read the <a href=\"\">agreement</a>\r\n                </Checkbox>\r\n              </Form.Item>\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 6 }}>\r\n                <Button\r\n                  type=\"primary\"\r\n                  className=\"login-form-button\"\r\n                  loading={loading}\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Mağaza Aç\r\n                </Button>\r\n                Zaten Üye misin? <Link to=\"/login\">Giriş Yap</Link>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default ShopRegister;\r\n",{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":1,"column":27,"nodeType":"159","messageId":"160","endLine":1,"endColumn":36},{"ruleId":"157","severity":1,"message":"161","line":23,"column":8,"nodeType":"159","messageId":"160","endLine":23,"endColumn":11},{"ruleId":"157","severity":1,"message":"162","line":30,"column":5,"nodeType":"159","messageId":"160","endLine":30,"endColumn":13},{"ruleId":"157","severity":1,"message":"163","line":31,"column":5,"nodeType":"159","messageId":"160","endLine":31,"endColumn":16},{"ruleId":"157","severity":1,"message":"164","line":33,"column":5,"nodeType":"159","messageId":"160","endLine":33,"endColumn":23},{"ruleId":"157","severity":1,"message":"165","line":34,"column":5,"nodeType":"159","messageId":"160","endLine":34,"endColumn":20},{"ruleId":"166","severity":1,"message":"167","line":57,"column":6,"nodeType":"168","endLine":57,"endColumn":8,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":107,"column":19,"nodeType":"172","messageId":"173","endLine":107,"endColumn":21},{"ruleId":"170","severity":1,"message":"171","line":145,"column":21,"nodeType":"172","messageId":"173","endLine":145,"endColumn":23},{"ruleId":"157","severity":1,"message":"161","line":5,"column":8,"nodeType":"159","messageId":"160","endLine":5,"endColumn":11},{"ruleId":"157","severity":1,"message":"174","line":17,"column":5,"nodeType":"159","messageId":"160","endLine":17,"endColumn":10},{"ruleId":"170","severity":1,"message":"171","line":54,"column":23,"nodeType":"172","messageId":"173","endLine":54,"endColumn":25},{"ruleId":"157","severity":1,"message":"175","line":7,"column":3,"nodeType":"159","messageId":"160","endLine":7,"endColumn":8},{"ruleId":"157","severity":1,"message":"176","line":11,"column":3,"nodeType":"159","messageId":"160","endLine":11,"endColumn":13},{"ruleId":"157","severity":1,"message":"177","line":15,"column":3,"nodeType":"159","messageId":"160","endLine":15,"endColumn":17},{"ruleId":"157","severity":1,"message":"178","line":19,"column":10,"nodeType":"159","messageId":"160","endLine":19,"endColumn":22},{"ruleId":"157","severity":1,"message":"179","line":21,"column":8,"nodeType":"159","messageId":"160","endLine":21,"endColumn":14},{"ruleId":"157","severity":1,"message":"180","line":38,"column":16,"nodeType":"159","messageId":"160","endLine":38,"endColumn":23},{"ruleId":"157","severity":1,"message":"181","line":39,"column":9,"nodeType":"159","messageId":"160","endLine":39,"endColumn":19},{"ruleId":"166","severity":1,"message":"182","line":115,"column":6,"nodeType":"168","endLine":115,"endColumn":8,"suggestions":"183"},{"ruleId":"157","severity":1,"message":"184","line":121,"column":12,"nodeType":"159","messageId":"160","endLine":121,"endColumn":24},{"ruleId":"166","severity":1,"message":"185","line":62,"column":5,"nodeType":"168","endLine":62,"endColumn":16,"suggestions":"186"},{"ruleId":"166","severity":1,"message":"187","line":70,"column":6,"nodeType":"168","endLine":70,"endColumn":29,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":179,"column":25,"nodeType":"191","endLine":179,"endColumn":28},{"ruleId":"189","severity":1,"message":"190","line":185,"column":25,"nodeType":"191","endLine":185,"endColumn":28},{"ruleId":"189","severity":1,"message":"190","line":191,"column":25,"nodeType":"191","endLine":191,"endColumn":28},{"ruleId":"166","severity":1,"message":"182","line":159,"column":6,"nodeType":"168","endLine":159,"endColumn":8,"suggestions":"192"},{"ruleId":"170","severity":1,"message":"193","line":36,"column":28,"nodeType":"172","messageId":"173","endLine":36,"endColumn":30},{"ruleId":"189","severity":1,"message":"194","line":126,"column":17,"nodeType":"191","endLine":126,"endColumn":58},{"ruleId":"170","severity":1,"message":"193","line":23,"column":28,"nodeType":"172","messageId":"173","endLine":23,"endColumn":30},{"ruleId":"170","severity":1,"message":"193","line":26,"column":28,"nodeType":"172","messageId":"173","endLine":26,"endColumn":30},{"ruleId":"170","severity":1,"message":"193","line":45,"column":28,"nodeType":"172","messageId":"173","endLine":45,"endColumn":30},{"ruleId":"170","severity":1,"message":"193","line":59,"column":28,"nodeType":"172","messageId":"173","endLine":59,"endColumn":30},{"ruleId":"189","severity":1,"message":"194","line":433,"column":35,"nodeType":"191","endLine":433,"endColumn":46},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'API' is defined but never used.","'userRole' is assigned a value but never used.","'setUserRole' is assigned a value but never used.","'setUserNameSurname' is assigned a value but never used.","'userNameSurname' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setUserNameSurname', 'setUserRole', and 'token'. Either include them or remove the dependency array.","ArrayExpression",["197"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'token' is assigned a value but never used.","'Input' is defined but never used.","'DatePicker' is defined but never used.","'ConfigProvider' is defined but never used.","'UserOutlined' is defined but never used.","'locale' is defined but never used.","'setSize' is assigned a value but never used.","'dateFormat' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCurrentUser', 'setFirstBreadcrumb', 'setLastBreadcrumb', and 'setSecondBreadcrumb'. Either include them or remove the dependency array.",["198"],"'onTimeChange' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'sortValue'. Either exclude it or remove the dependency array.",["199"],"React Hook useEffect has missing dependencies: 'fetch', 'header', 'pagination', 'setFirstBreadcrumb', 'setLastBreadcrumb', and 'setSecondBreadcrumb'. Either include them or remove the dependency array.",["200"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["201"],"Expected '!==' and instead saw '!='.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"204","fix":"210"},"Update the dependencies array to be: [setUserNameSurname, setUserRole, token]",{"range":"211","text":"212"},"Update the dependencies array to be: [getCurrentUser, setFirstBreadcrumb, setLastBreadcrumb, setSecondBreadcrumb]",{"range":"213","text":"214"},"Update the dependencies array to be: []",{"range":"215","text":"216"},"Update the dependencies array to be: [sortValue, searchText, fetch, pagination, setFirstBreadcrumb, setSecondBreadcrumb, setLastBreadcrumb, header]",{"range":"217","text":"218"},{"range":"219","text":"214"},[1440,1442],"[setUserNameSurname, setUserRole, token]",[3356,3358],"[getCurrentUser, setFirstBreadcrumb, setLastBreadcrumb, setSecondBreadcrumb]",[1976,1987],"[]",[2168,2191],"[sortValue, searchText, fetch, pagination, setFirstBreadcrumb, setSecondBreadcrumb, setLastBreadcrumb, header]",[4552,4554]]