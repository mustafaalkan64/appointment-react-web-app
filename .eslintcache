[{"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\index.js":"1","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\reportWebVitals.js":"2","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\App.js":"3","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserLayout.js":"4","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\contexts\\UserContext.js":"5","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\contexts\\BreadcrumbContext.js":"6","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\myActiveAppointments.js":"7","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyPreviousAppointments.js":"8","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyOncomingAppointments.js":"9","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\CreateAppointment.js":"10","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyPersonelInformations.js":"11","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\ForgotPassword.js":"12","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\ResetPassword.js":"13","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserRegister.js":"14","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserLogin.js":"15","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\NoMatch.js":"16","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserHome.js":"17","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\SideNav.js":"18","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LayoutHeader.js":"19","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\ChangeMyPassword.js":"20","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserSettings.js":"21","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\api.js":"22","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyAppointments.js":"23","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\utils.js":"24","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyCanceledAppointments.js":"25"},{"size":612,"mtime":1612755703588,"results":"26","hashOfConfig":"27"},{"size":375,"mtime":1612755703588,"results":"28","hashOfConfig":"27"},{"size":484,"mtime":1612755703575,"results":"29","hashOfConfig":"27"},{"size":4841,"mtime":1612755703583,"results":"30","hashOfConfig":"27"},{"size":760,"mtime":1612755703587,"results":"31","hashOfConfig":"27"},{"size":683,"mtime":1612755703587,"results":"32","hashOfConfig":"27"},{"size":255,"mtime":1612755703585,"results":"33","hashOfConfig":"27"},{"size":286,"mtime":1612755703581,"results":"34","hashOfConfig":"27"},{"size":295,"mtime":1612755703581,"results":"35","hashOfConfig":"27"},{"size":241,"mtime":1612755703577,"results":"36","hashOfConfig":"27"},{"size":13924,"mtime":1612755703581,"results":"37","hashOfConfig":"27"},{"size":3193,"mtime":1612761091776,"results":"38","hashOfConfig":"27"},{"size":3822,"mtime":1612761121013,"results":"39","hashOfConfig":"27"},{"size":6412,"mtime":1612760674438,"results":"40","hashOfConfig":"27"},{"size":4103,"mtime":1612761344599,"results":"41","hashOfConfig":"27"},{"size":240,"mtime":1612755703581,"results":"42","hashOfConfig":"27"},{"size":227,"mtime":1612755703583,"results":"43","hashOfConfig":"27"},{"size":2931,"mtime":1612755703583,"results":"44","hashOfConfig":"27"},{"size":2176,"mtime":1612755703578,"results":"45","hashOfConfig":"27"},{"size":4704,"mtime":1612755703576,"results":"46","hashOfConfig":"27"},{"size":98,"mtime":1612755703585,"results":"47","hashOfConfig":"27"},{"size":107,"mtime":1612755703568,"results":"48","hashOfConfig":"27"},{"size":9313,"mtime":1612755703579,"results":"49","hashOfConfig":"27"},{"size":410,"mtime":1612755703589,"results":"50","hashOfConfig":"27"},{"size":291,"mtime":1612760247359,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1ioh9d8",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\index.js",[],["109","110"],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\reportWebVitals.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\App.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserLayout.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\contexts\\UserContext.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\contexts\\BreadcrumbContext.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\myActiveAppointments.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyPreviousAppointments.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyOncomingAppointments.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\CreateAppointment.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyPersonelInformations.js",["111"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport UserContext from \"./../contexts/UserContext\";\r\nimport BreadCrumbContext from \"./../contexts/BreadcrumbContext\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  DatePicker,\r\n  Select,\r\n  Typography,\r\n  ConfigProvider,\r\n  message,\r\n} from \"antd\";\r\nimport API from \"./../api\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport \"moment/locale/tr\";\r\nimport locale from \"antd/lib/locale/tr_TR\";\r\nimport moment from \"moment\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst MyPersonelInformations = () => {\r\n  const [form] = Form.useForm();\r\n  const { token } = useContext(UserContext);\r\n  const {\r\n    setFirstBreadcrumb,\r\n    setSecondBreadcrumb,\r\n    setLastBreadcrumb,\r\n  } = useContext(BreadCrumbContext);\r\n  const history = useHistory();\r\n  const [, forceUpdate] = useState({}); // To disable submit button at the beginning.\r\n  const [cities, setCities] = useState([]);\r\n  const [loading, setLoading] = useState([]);\r\n  const [districts, setDistricts] = useState([]);\r\n  const [zones, setZones] = useState([]);\r\n  const [userBirthday, setUserBirthday] = useState(\"\");\r\n  const dateFormat = \"DD.MM.YYYY\";\r\n  const { Option } = Select;\r\n\r\n  const style = { padding: \"8px 0\" };\r\n\r\n  const setCurrenUser = (userForm) => {\r\n    setLoading(true);\r\n    API.put(`user/updateUser`, userForm, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        message.success(res.data.response);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n        if (error.response.status === 401) {\r\n          history.push(\"/login\");\r\n          message.error(\"Bu İşlemi Yapmaya Yetkiniz Yok!\");\r\n        } else {\r\n          message.error(\r\n            \"Kişisel Bilgileri Güncelleme Sırasında Hata ile Karşılaşıldı!\"\r\n          );\r\n        }\r\n      });\r\n  };\r\n\r\n  const getCities = async () => {\r\n    await API.get(`place/getCities`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setCities(res.data);\r\n      })\r\n      .catch((error) => {\r\n        message.error(\"Şehirleri Getirme Sırasında Hata ile Karşılaşıldı\");\r\n      });\r\n  };\r\n\r\n  const getDistricts = async (cityId) => {\r\n    await API.get(`place/getDistrictsByCityId?cityId=${cityId}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setDistricts(res.data);\r\n      })\r\n      .catch((error) => {\r\n        message.error(\"İlçeleri Getirme Sırasında Hata ile Karşılaşıldı\");\r\n      });\r\n  };\r\n\r\n  const getZones = async (districtId) => {\r\n    await API.get(`place/GetZonesByDistrictId?districtId=${districtId}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setZones(res.data);\r\n      })\r\n      .catch((error) => {\r\n        message.error(\"Bölgeleri Getirme Sırasında Hata ile Karşılaşıldı\");\r\n      });\r\n  };\r\n\r\n  const getCurrentUser = async () => {\r\n    setLoading(true);\r\n    await API.get(`user/currentUser?`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setLoading(false);\r\n        var d = new Date(res.data.birthday);\r\n        var birthdaystring = d.toLocaleString(\"tr-TR\").substring(0, 10);\r\n        setUserBirthday(birthdaystring);\r\n        form.setFieldsValue({\r\n          name: res.data.firstName,\r\n          surname: res.data.lastName,\r\n          email: res.data.email,\r\n          birthDay: birthdaystring,\r\n          city: res.data.cityId,\r\n          district: res.data.districtId,\r\n          zone: res.data.zoneId,\r\n          username: res.data.username,\r\n        });\r\n        getDistricts(res.data.cityId);\r\n        getZones(res.data.districtId);\r\n        console.log(userBirthday);\r\n      })\r\n      .catch((error) => {\r\n        if (error.response.status === 401) {\r\n          history.push(\"/login\");\r\n          message.error(\"Bu İşlemi Yapmaya Yetkiniz Yok!\");\r\n        } else {\r\n          message.error(\r\n            \"Kişisel Bilgileri Getirme Esnasında Hata ile Karşılaşıldı!\"\r\n          );\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    forceUpdate({});\r\n\r\n    getCities();\r\n    getCurrentUser();\r\n    setFirstBreadcrumb(\"Anasayfa\");\r\n    setSecondBreadcrumb(\"Hesap\");\r\n    setLastBreadcrumb(\"Profilim\");\r\n  }, []);\r\n\r\n  const handleCityChange = (value) => {\r\n    setDistricts([]);\r\n    form.setFieldsValue({\r\n      district: \"\",\r\n      zone: \"\",\r\n    });\r\n    getDistricts(value);\r\n  };\r\n\r\n  const handleDistrictChange = (value) => {\r\n    setZones([]);\r\n    form.setFieldsValue({\r\n      zone: \"\",\r\n    });\r\n    getZones(value);\r\n  };\r\n\r\n  const handleZoneChange = (value) => {};\r\n\r\n  const onBirthdayChange = (date, dateString) => {\r\n    form.setFieldsValue({\r\n      birthDay: dateString,\r\n    });\r\n    setUserBirthday(dateString);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    const userForm = {\r\n      Name: values.name,\r\n      Surname: values.surname,\r\n      CityId: values.city,\r\n      DistrictId: values.district,\r\n      ZoneId: values.zone,\r\n      BirthDay: values.birthDay,\r\n      Username: values.username,\r\n    };\r\n    setCurrenUser(userForm);\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 18,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col span={23}>\r\n          <Title style={{ textAlign: \"center\" }} level={2}>\r\n            Profil Bilgilerim\r\n          </Title>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Form\r\n        form={form}\r\n        name=\"horizontal_login\"\r\n        layout=\"horizontal\"\r\n        onFinish={onFinish}\r\n      >\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                label=\"İsim\"\r\n                name=\"name\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen İsminizi Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"İsim\"\r\n                />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"surname\"\r\n                label=\"Soyisim\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Soyisminizi Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"Soyisim\"\r\n                />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"birthDay\"\r\n                label=\"Doğum Tarihi\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Doğum Tarihinizi Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <ConfigProvider locale={locale}>\r\n                  <DatePicker\r\n                    format={dateFormat}\r\n                    defaultValue={moment(userBirthday, dateFormat)}\r\n                    value={moment(userBirthday, dateFormat)}\r\n                    onChange={onBirthdayChange}\r\n                    placeholder=\"Doğum Tarihiniz\"\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </ConfigProvider>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"username\"\r\n                label=\"Kullanıcı Adı\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Kullanıcı Adını Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input placeholder=\"Kullanıcı Adı\" />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"email\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 18 }}\r\n                label=\"Email\"\r\n              >\r\n                <Input placeholder=\"email\" disabled=\"disabled\" />\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"city\"\r\n                label=\"İl\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 20 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen İl Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={\"default\"}\r\n                  onChange={handleCityChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {cities.map((city, key) => {\r\n                    return (\r\n                      <Option value={city.id} key={city.id}>\r\n                        {city.cityName}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                name=\"district\"\r\n                label=\"İlçe\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 20 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen İlçe Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={\"default\"}\r\n                  onChange={handleDistrictChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {districts.map((district, key) => {\r\n                    return (\r\n                      <Option value={district.id} key={district.id}>\r\n                        {district.districtName}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 20 }}\r\n                name=\"zone\"\r\n                label=\"Köy/Mahalle\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Semt/Mahalle Giriniz!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  size={\"default\"}\r\n                  onChange={handleZoneChange}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {zones.map((zone, key) => {\r\n                    return (\r\n                      <Option value={zone.id} key={zone.id}>\r\n                        {zone.zoneName}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={12} offset={4}>\r\n            <div style={style}>\r\n              <Form.Item\r\n                wrapperCol={{ ...layout.wrapperCol, offset: 6 }}\r\n                shouldUpdate={true}\r\n              >\r\n                {() => (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    loading={loading}\r\n                    htmlType=\"submit\"\r\n                    style={{ width: \"100%\" }}\r\n                    disabled={\r\n                      !!form\r\n                        .getFieldsError()\r\n                        .filter(({ errors }) => errors.length).length\r\n                    }\r\n                  >\r\n                    Kaydet\r\n                  </Button>\r\n                )}\r\n              </Form.Item>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\nexport default MyPersonelInformations;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\ForgotPassword.js",["112"],"import React, { useState } from \"react\";\r\nimport { Row, Col, Typography, Input, Form, Button, message, Card } from \"antd\";\r\nimport background from \"./../assets/img/login-background-image.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport API from \"./../api\";\r\nconst { Title } = Typography;\r\n\r\nconst ForgotPassword = () => {\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n  const handleSubmit = async (values) => {\r\n    setLoading(true);\r\n    const forgotPasswordModel = {\r\n      Email: values.email,\r\n    };\r\n    await API.post(`user/forgotPassword`, forgotPasswordModel)\r\n      .then((res) => {\r\n        message.success(\r\n          \"Şifrenizi Yenilemek İçin Gerekli Olan İşlemleri Email Adresinize Gönderdik!\"\r\n        );\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.response.data);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 14,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingTop: \"150px\",\r\n        backgroundImage: `url(${background})`,\r\n        backgroundRepeat: \"no-repeat\",\r\n        height: \"978px\",\r\n        backgroundSize: \"cover\",\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col span={12} offset={6}>\r\n          <Card\r\n            title=\"Şifremi Unuttum\"\r\n            hoverable\r\n            bordered={true}\r\n            style={{ width: \"100%\" }}\r\n            headStyle={{\r\n              textAlign: \"center\",\r\n              fontSize: \"19px\",\r\n            }}\r\n          >\r\n            <Form\r\n              {...layout}\r\n              form={form}\r\n              name=\"forgotPassword\"\r\n              layout=\"horizontal\"\r\n              onFinish={handleSubmit}\r\n            >\r\n              <Form.Item\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Email Adresi Giriniz\",\r\n                  },\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"Email Adresinizi Doğru Formatta Değil\",\r\n                  },\r\n                  {\r\n                    max: 50,\r\n                    message:\r\n                      \"Email Adresiniz En Fazla 50 Karakterden Oluşmalıdır\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input placeholder=\"Lütfen Email Giriniz\" />\r\n              </Form.Item>\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 6 }}>\r\n                <Button\r\n                  type=\"primary\"\r\n                  loading={loading}\r\n                  className=\"login-form-button\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Şifre Gönder\r\n                </Button>\r\n                <Link to=\"/login\">Login</Link> Sayfasına Geri Dön\r\n              </Form.Item>\r\n              <Form.Item\r\n                wrapperCol={{ ...layout.wrapperCol, offset: 6 }}\r\n              ></Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default ForgotPassword;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\ResetPassword.js",["113"],"import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Row, Col, Typography, Input, Form, Button, message, Card } from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\nimport background from \"./../assets/img/login-background-image.png\";\r\nimport API from \"./../api\";\r\nconst { Title } = Typography;\r\n\r\nconst ResetPassword = () => {\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  const { verify_token } = useParams();\r\n  const handleSubmit = async (values) => {\r\n    setLoading(true);\r\n    const resetPasswordModel = {\r\n      Password: values.password,\r\n      VerifyToken: verify_token,\r\n    };\r\n    await API.post(`user/resetPassword`, resetPasswordModel)\r\n      .then((res) => {\r\n        message.success(\"Şifrenizi Başarıyla Güncellediniz!\");\r\n        history.push(\"/login\");\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.response.data);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 14,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingTop: \"150px\",\r\n        backgroundImage: `url(${background})`,\r\n        backgroundRepeat: \"no-repeat\",\r\n        height: \"978px\",\r\n        backgroundSize: \"cover\",\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col span={12} offset={6}>\r\n          <Card\r\n            title=\"Şifremi Yenile\"\r\n            hoverable\r\n            bordered={true}\r\n            style={{ width: \"100%\" }}\r\n            headStyle={{\r\n              textAlign: \"center\",\r\n              fontSize: \"19px\",\r\n            }}\r\n          >\r\n            <Form\r\n              {...layout}\r\n              form={form}\r\n              name=\"resetPassword\"\r\n              layout=\"horizontal\"\r\n              onFinish={handleSubmit}\r\n            >\r\n              <Form.Item\r\n                label=\"Şifre\"\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Şifrenizi Giriniz\",\r\n                  },\r\n                  {\r\n                    min: 8,\r\n                    message: \"Şifreniz En Az 8 Karakterden Oluşmalıdır\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password placeholder=\"Lütfen Şifrenizi Giriniz\" />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"confirm\"\r\n                label=\"Şifreyi Onayla\"\r\n                dependencies={[\"password\"]}\r\n                hasFeedback\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Lütfen Şifrenizi Onaylayınız\",\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(_, value) {\r\n                      if (!value || getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\"Girdiğiniz Şifreler Eşleşmiyor!\");\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password placeholder=\"Lütfen Şifreyi Onaylayınız\" />\r\n              </Form.Item>\r\n\r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 6 }}>\r\n                <Button\r\n                  type=\"primary\"\r\n                  loading={loading}\r\n                  className=\"login-form-button\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Şifremi Güncelle\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default ResetPassword;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserRegister.js",["114"],"import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Typography,\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Radio,\r\n  message,\r\n  Checkbox,\r\n  Card,\r\n} from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\nimport background from \"./../assets/img/login-background-image.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"./../contexts/UserContext\";\r\nimport API from \"./../api\";\r\nconst { Title } = Typography;\r\n\r\nconst UserRegister = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n  const { setIsLoggedIn, setToken } = useContext(UserContext);\r\n  const handleSubmit = (values) => {\r\n    const user = {\r\n      Email: values.email,\r\n      Password: values.password,\r\n      FirstName: values.name,\r\n      LastName: values.surname,\r\n      UserName: values.username,\r\n      Gender: values.gender,\r\n    };\r\n    setLoading(true);\r\n    API.post(`user/register`, user)\r\n      .then((res) => {\r\n        localStorage.setItem(\"auth_token\", res.data.response);\r\n        message.success(\"You've Registered Successfuly!\");\r\n        setIsLoggedIn(true);\r\n        setToken(res.data.response);\r\n        setLoading(false);\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.response.data);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 14,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingTop: 120,\r\n        backgroundImage: `url(${background})`,\r\n        backgroundRepeat: \"no-repeat\",\r\n        height: \"965px\",\r\n        backgroundSize: \"cover\",\r\n      }}\r\n    >\r\n      <Row>\r\n        <Col span={12} offset={6}>\r\n        <Card\r\n            title=\"Üye Kaydı\"\r\n            hoverable\r\n            bordered={true}\r\n            style={{ width: \"100%\" }}\r\n            headStyle={{\r\n              textAlign: \"center\",\r\n              fontSize: \"19px\",\r\n            }}\r\n          >\r\n          <Form\r\n            {...layout}\r\n            form={form}\r\n            name=\"register\"\r\n            layout=\"horizontal\"\r\n            onFinish={handleSubmit}\r\n          >\r\n            <Form.Item\r\n              name=\"name\"\r\n              label=\"Ad\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Lütfen Adınızı Giriniz\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Lütfen Adınızı Giriniz\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"surname\"\r\n              label=\"Soyad\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Lütfen Soyadınızı Giriniz\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Lütfen Soyadınızı Giriniz\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"username\"\r\n              label=\"Kullanıcı Adı\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Lütfen Kullanıcı Adı Giriniz\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Lütfen Kullanıcı Adı Giriniz\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              rules={[\r\n                {\r\n                  type: \"email\",\r\n                  message: \"Email Adresinizi Doğru Formatta Değil!\",\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: \"Lütfen Email Adresinizi Giriniz\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Lütfen Email Adresinizi Giriniz\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"password\"\r\n              label=\"Şifre\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Lütfen Şifrenizi Giriniz\",\r\n                },\r\n                { min: 8, message: \"Şifreniz En Az 8 Karakterden Oluşmalıdır\" },\r\n              ]}\r\n              hasFeedback\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"confirm\"\r\n              label=\"Şifreyi Onayla\"\r\n              dependencies={[\"password\"]}\r\n              hasFeedback\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Lütfen Şifrenizi Onaylayınız\",\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (!value || getFieldValue(\"password\") === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(\"Girdiğiniz Şifreler Eşleşmiyor!\");\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"gender\"\r\n              label=\"Cinsiyet\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please select your gender\",\r\n                },\r\n              ]}\r\n            >\r\n              <Radio.Group>\r\n                <Radio value=\"0\">Kadın</Radio>\r\n                <Radio value=\"1\">Erkek</Radio>\r\n                <Radio value=\"2\">Diğer</Radio>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              style={{ marginBottom: 8 }}\r\n              wrapperCol={{ ...layout.wrapperCol, offset: 6 }}\r\n            >\r\n              <Checkbox>\r\n                I have read the <Link to=\"Agreement\" value=\"agreement\" />\r\n              </Checkbox>\r\n            </Form.Item>\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 6 }}>\r\n              <Button\r\n                type=\"primary\"\r\n                className=\"login-form-button\"\r\n                loading={loading}\r\n                htmlType=\"submit\"\r\n              >\r\n                Üye Ol\r\n              </Button>\r\n              Zaten Üye misin? <Link to=\"/login\">Giriş Yap</Link>\r\n            </Form.Item>\r\n          </Form>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default UserRegister;\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserLogin.js",["115","116"],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\NoMatch.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserHome.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\SideNav.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\LayoutHeader.js",["117"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Menu, Layout } from \"antd\";\r\nimport UserContext from \"./../contexts/UserContext\";\r\nimport { SettingFilled } from \"@ant-design/icons\";\r\nimport API from \"./../api\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Header } = Layout;\r\n\r\nexport default function LayoutHeader() {\r\n  const {\r\n    setIsLoggedIn,\r\n    setToken,\r\n    token,\r\n    setUserNameSurname,\r\n    userNameSurname,\r\n  } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const getCurrentUsers = async () => {\r\n      await API.get(`user/currentUser`, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          setUserNameSurname(res.data.firstName + \" \" + res.data.lastName);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n    getCurrentUsers();\r\n  }, []);\r\n\r\n  const handleMyPersonelInformations = () => {\r\n    history.push(\"/myPersonelInformations\");\r\n  };\r\n  const handleSettings = () => {\r\n    history.push(\"/userSettings\");\r\n  };\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"auth_token\");\r\n    setIsLoggedIn(false);\r\n    setToken(null);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header className=\"header\">\r\n        <div className=\"logo\" />\r\n\r\n        <Menu\r\n          theme=\"dark\"\r\n          mode=\"horizontal\"\r\n          style={{ float: \"right\" }}\r\n          defaultSelectedKeys={[\"2\"]}\r\n        >\r\n          <Menu.Item key=\"deneme\">Hoşgeldiniz {userNameSurname}</Menu.Item>\r\n          <SubMenu key=\"account\" icon={<SettingFilled />}>\r\n            <Menu.Item onClick={handleMyPersonelInformations} key=\"setting:1\">\r\n              Profilim\r\n            </Menu.Item>\r\n            <Menu.Item onClick={handleSettings} key=\"setting:2\">\r\n              Ayarlar\r\n            </Menu.Item>\r\n            <Menu.Item onClick={handleLogout} key=\"setting:3\">\r\n              Çıkış\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        </Menu>\r\n      </Header>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\ChangeMyPassword.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\UserSettings.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\api.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyAppointments.js",["118","119","120","121","122"],"//src/components/pages/list.tsx\r\nimport React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { Table, Row, Col, Button, Typography, Input, Modal } from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Tag, Space, message, Spin, Select } from \"antd\";\r\nimport API from \"./../api\";\r\nimport { serialize } from \"./../utils\";\r\nimport UserContext from \"./../contexts/UserContext\";\r\nimport BreadCrumbContext from \"./../contexts/BreadcrumbContext\";\r\nconst { TextArea } = Input;\r\n\r\nexport default function MyAppointments(props) {\r\n  const { Title } = Typography;\r\n  const history = useHistory();\r\n  const [myAppointments, setAppointmentData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [sortValue, setSortValue] = useState(\"\");\r\n  const status = props.status;\r\n  const header = props.header;\r\n  const { token } = useContext(UserContext);\r\n  const {\r\n    setFirstBreadcrumb,\r\n    setSecondBreadcrumb,\r\n    setLastBreadcrumb,\r\n  } = useContext(BreadCrumbContext);\r\n  const [pagination, setPagination] = useState({\r\n    current: 1,\r\n    pageSize: 10,\r\n  });\r\n  const [appointmentCancelReason, setAppointmentCancelReason] = useState(\"\");\r\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(0);\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const showModel = (obj) => {\r\n    setIsModalVisible(true);\r\n    setSelectedAppointmentId(obj.id);\r\n    setAppointmentCancelReason(\"\");\r\n  };\r\n\r\n  const handleOk = () => {\r\n    cancelAppointment(selectedAppointmentId, appointmentCancelReason);\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const pageHeader = header;\r\n  const { Option } = Select;\r\n\r\n  const handleClick = () => {\r\n    history.push(\"/form\");\r\n  };\r\n\r\n  const handleSortChange = useCallback(\r\n    (value) => {\r\n      setSortValue(value);\r\n    },\r\n    [sortValue]\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetch({ pagination });\r\n    setFirstBreadcrumb(\"Anasayfa\");\r\n    setSecondBreadcrumb(\"Randevu Bilgilerim\");\r\n    setLastBreadcrumb(header);\r\n  }, [sortValue, searchText]);\r\n\r\n  const cancelAppointment = async (appointmentId, cancelReasonText) => {\r\n    if (window.confirm(\"Randevuyu İptal Etmek İstediğinize Emin misiniz?\")) {\r\n      const cancelReason = {\r\n        CancelReason: cancelReasonText,\r\n      };\r\n      await API.put(\r\n        `appointment/cancelAppointment/${appointmentId}`,\r\n        cancelReason,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      )\r\n        .then((res) => {\r\n          message.success(res.data.response);\r\n          fetch({ pagination });\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.status === 401) {\r\n            history.push(\"/login\");\r\n            message.error(\"Bu İşlemi Yapmaya Yetkiniz Yok!\");\r\n          } else if (error.response.status === 404) {\r\n            message.warning(error.response.data);\r\n          } else {\r\n            message.error(error.response.data);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const convertToFullDate = (datetime) => {\r\n    var d = new Date(datetime);\r\n    var month = d.getUTCMonth() + 1; //months from 1-12\r\n    var day = d.getDate();\r\n    var year = d.getUTCFullYear();\r\n\r\n    var minutes = d.getMinutes();\r\n    var hour = d.getHours();\r\n\r\n    var newdate = `${day}.${month}.${year} ${hour}:${minutes}`;\r\n    return newdate;\r\n  };\r\n\r\n  const handleTableChange = (pagination, filters, sorter) => {\r\n    fetch({\r\n      pagination,\r\n    });\r\n  };\r\n\r\n  const handleChangeSearch = (e) => {\r\n    setSearchText(e.target.value);\r\n    setPagination({\r\n      current: 1,\r\n      pageSize: 10,\r\n    });\r\n  };\r\n\r\n  const fetch = async (params) => {\r\n    setLoading(true);\r\n    var queryString = serialize({\r\n      current: params.pagination.current,\r\n      pageSize: params.pagination.pageSize,\r\n      status,\r\n      searchText,\r\n      sortValue,\r\n    });\r\n    await API.get(`appointment/filter?${queryString}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setAppointmentData(res.data.item1);\r\n        setLoading(false);\r\n        setPagination({\r\n          ...params.pagination,\r\n          total: res.data.item2,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.response.status === 401) {\r\n          history.push(\"/login\");\r\n        } else {\r\n          message.error(\"Randevuları Getirme Esnasında Hata ile Karşılaşıldı!\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Id\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n    },\r\n    {\r\n      title: \"Mağaza\",\r\n      dataIndex: \"shopTitle\",\r\n      key: \"shopTitle\",\r\n      render: (text) => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: \"Randevu Başlangıç Tarihi\",\r\n      dataIndex: \"appointmentBeginDate\",\r\n      key: \"appointmentBeginDate\",\r\n      render: (date) => <a>{convertToFullDate(date)}</a>,\r\n    },\r\n    {\r\n      title: \"Randevu Bitiş Tarihi\",\r\n      dataIndex: \"appointmentEndDate\",\r\n      key: \"appointmentEndDate\",\r\n      render: (date) => <a>{convertToFullDate(date)}</a>,\r\n    },\r\n    {\r\n      title: \"Durumu\",\r\n      key: \"status\",\r\n      dataIndex: \"status\",\r\n      render: (status) => (\r\n        <div>\r\n          <Tag color={status === 1 ? \"green\" : \"red\"}>\r\n            {status === 1 ? \"Aktif\" : \"Pasif\"}\r\n          </Tag>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Randevu Aldığım Hizmetler\",\r\n      key: \"appointmentServices\",\r\n      dataIndex: \"appointmentServices\",\r\n      render: (appointmentServices) => (\r\n        <div>\r\n          {appointmentServices.map((service) => {\r\n            let color =\r\n              service.services.serviceName.length > 5 ? \"geekblue\" : \"green\";\r\n            if (service.services.serviceName === \"loser\") {\r\n              color = \"volcano\";\r\n            }\r\n            return (\r\n              <Tag color={color} key={service.services.id}>\r\n                {service.services.serviceName.toUpperCase()}\r\n              </Tag>\r\n            );\r\n          })}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"id\",\r\n\r\n      render: (text, obj) => (\r\n        <Space size=\"middle\">\r\n          <Button\r\n            disabled={obj.status === 0}\r\n            block\r\n            type={obj.status === 1 ? \"danger\" : \"primary\"}\r\n            onClick={() => showModel(obj)}\r\n          >\r\n            {obj.status === 1 ? \"İptal Et\" : \"Aktif Et\"}\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  myAppointments.map((data) => {\r\n    data.shopTitle = data.shops.shopTitle;\r\n    return data;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Row gutter={[40, 0]}>\r\n        <Col span={18}>\r\n          <Title level={2}>{pageHeader}</Title>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Button onClick={handleClick} block type=\"primary\">\r\n            Yeni Randevu Talep Et\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={12}>\r\n          <Input placeholder=\"Ara..\" onChange={handleChangeSearch} />\r\n        </Col>\r\n        <Col span={12}>\r\n          <Select\r\n            defaultValue=\"Seçiniz\"\r\n            onChange={handleSortChange}\r\n            style={{ width: \"100%\" }}\r\n          >\r\n            <Option key={\"ascByCreatedDate\"}>\r\n              Oluşturulma Tarihine Göre Artan\r\n            </Option>\r\n            <Option key={\"descByCreatedDate\"}>\r\n              Oluşturulma Tarihine Göre Azalan\r\n            </Option>\r\n            <Option key={\"ascByAppointmentDate\"}>\r\n              En Yakın Tarihli Randevuya Göre\r\n            </Option>\r\n            <Option key={\"descByAppointmentDate\"}>\r\n              En Uzak Tarihli Randevuya Göre\r\n            </Option>\r\n          </Select>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={[40, 0]}>\r\n        <Col span={24}>\r\n          {loading ? (\r\n            <div className=\"spinClass\">\r\n              <Space size=\"middle\">\r\n                <Spin size=\"large\" />\r\n              </Space>\r\n            </div>\r\n          ) : (\r\n            <Table\r\n              columns={columns}\r\n              rowKey={(record) => record.id}\r\n              pagination={pagination}\r\n              loading={loading}\r\n              onChange={handleTableChange}\r\n              dataSource={myAppointments}\r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      <Modal\r\n        title=\"Randevu İptal\"\r\n        visible={isModalVisible}\r\n        onOk={handleOk}\r\n        okButtonProps={{\r\n          disabled: appointmentCancelReason === \"\" ? true : false,\r\n        }}\r\n        onCancel={handleCancel}\r\n      >\r\n        <Row gutter={[40, 0]}>\r\n          <Col span={24}>Randevu İptal Nedeni</Col>\r\n        </Row>\r\n        <Row gutter={[40, 0]}>\r\n          <Col span={24}>\r\n            <TextArea\r\n              showCount\r\n              value={appointmentCancelReason}\r\n              onChange={(event) =>\r\n                setAppointmentCancelReason(event.target.value)\r\n              }\r\n              maxLength={500}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\utils.js",[],"C:\\Users\\Asus\\Desktop\\appointment-react-app\\appointment-react-web-app\\src\\components\\MyCanceledAppointments.js",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":159,"column":6,"nodeType":"129","endLine":159,"endColumn":8,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":6,"column":9,"nodeType":"133","messageId":"134","endLine":6,"endColumn":14},{"ruleId":"131","severity":1,"message":"132","line":7,"column":9,"nodeType":"133","messageId":"134","endLine":7,"endColumn":14},{"ruleId":"131","severity":1,"message":"132","line":19,"column":9,"nodeType":"133","messageId":"134","endLine":19,"endColumn":14},{"ruleId":"131","severity":1,"message":"132","line":18,"column":9,"nodeType":"133","messageId":"134","endLine":18,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":121,"column":17,"nodeType":"137","endLine":121,"endColumn":58},{"ruleId":"127","severity":1,"message":"138","line":37,"column":6,"nodeType":"129","endLine":37,"endColumn":8,"suggestions":"139"},{"ruleId":"127","severity":1,"message":"140","line":62,"column":5,"nodeType":"129","endLine":62,"endColumn":16,"suggestions":"141"},{"ruleId":"127","severity":1,"message":"142","line":70,"column":6,"nodeType":"129","endLine":70,"endColumn":29,"suggestions":"143"},{"ruleId":"135","severity":1,"message":"144","line":173,"column":25,"nodeType":"137","endLine":173,"endColumn":28},{"ruleId":"135","severity":1,"message":"144","line":179,"column":25,"nodeType":"137","endLine":179,"endColumn":28},{"ruleId":"135","severity":1,"message":"144","line":185,"column":25,"nodeType":"137","endLine":185,"endColumn":28},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCurrentUser', 'setFirstBreadcrumb', 'setLastBreadcrumb', and 'setSecondBreadcrumb'. Either include them or remove the dependency array.","ArrayExpression",["147"],"no-unused-vars","'Title' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'setUserNameSurname' and 'token'. Either include them or remove the dependency array.",["148"],"React Hook useCallback has an unnecessary dependency: 'sortValue'. Either exclude it or remove the dependency array.",["149"],"React Hook useEffect has missing dependencies: 'fetch', 'header', 'pagination', 'setFirstBreadcrumb', 'setLastBreadcrumb', and 'setSecondBreadcrumb'. Either include them or remove the dependency array.",["150"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [getCurrentUser, setFirstBreadcrumb, setLastBreadcrumb, setSecondBreadcrumb]",{"range":"159","text":"160"},"Update the dependencies array to be: [setUserNameSurname, token]",{"range":"161","text":"162"},"Update the dependencies array to be: []",{"range":"163","text":"164"},"Update the dependencies array to be: [sortValue, searchText, fetch, pagination, setFirstBreadcrumb, setSecondBreadcrumb, setLastBreadcrumb, header]",{"range":"165","text":"166"},[4560,4562],"[getCurrentUser, setFirstBreadcrumb, setLastBreadcrumb, setSecondBreadcrumb]",[1011,1013],"[setUserNameSurname, token]",[1972,1983],"[]",[2164,2187],"[sortValue, searchText, fetch, pagination, setFirstBreadcrumb, setSecondBreadcrumb, setLastBreadcrumb, header]"]